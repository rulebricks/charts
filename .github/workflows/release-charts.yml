name: Release Charts

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: false
        type: string
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: false
        type: string
        default: 'patch'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Get next chart version
        id: next_version
        run: |
          # Function to get latest release with retries
          get_latest_release() {
            local max_retries=5
            local retry_delay=2
            local attempt=1

            while [ $attempt -le $max_retries ]; do
              echo "üîç Attempt $attempt to fetch latest release..."

              RESPONSE=$(curl -s -w "\n%{http_code}" https://api.github.com/repos/rulebricks/charts/releases/latest)
              HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | head -n-1)

              if [ "$HTTP_CODE" = "200" ]; then
                TAG_NAME=$(echo "$BODY" | jq -r '.tag_name // empty')
                if [ -n "$TAG_NAME" ] && [ "$TAG_NAME" != "null" ]; then
                  echo "$TAG_NAME"
                  return 0
                fi
              elif [ "$HTTP_CODE" = "404" ]; then
                # No releases yet
                echo "v0.0.0"
                return 0
              fi

              echo "‚ö†Ô∏è  Failed attempt $attempt (HTTP $HTTP_CODE)"
              if [ $attempt -lt $max_retries ]; then
                echo "‚è≥ Retrying in $retry_delay seconds..."
                sleep $retry_delay
                retry_delay=$((retry_delay * 2))
              fi

              attempt=$((attempt + 1))
            done

            echo "‚ùå Failed to fetch latest release after $max_retries attempts"
            return 1
          }

          # Determine workflow trigger type
          echo "üéØ Workflow triggered by: ${{ github.event_name }}"

          # Check if version was provided as input (from app workflow)
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # Use provided version from app workflow
            NEXT_VERSION="${{ github.event.inputs.version }}"
            echo "üì¶ Using version provided by app workflow: ${NEXT_VERSION}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            # Direct push to charts repo - rebuild current version without incrementing
            echo "üîÑ Direct repository update detected - rebuilding current version"

            # Get latest release with retries
            LATEST_RELEASE=$(get_latest_release)
            if [ $? -ne 0 ]; then
              echo "::error::Failed to get latest release after all retry attempts"
              echo "‚ùå Cannot proceed without knowing the current version"
              exit 1
            fi

            CURRENT_VERSION=${LATEST_RELEASE#v}
            NEXT_VERSION="${CURRENT_VERSION}"
            echo "üìå Rebuilding charts for version: ${NEXT_VERSION}"
            echo "‚ÑπÔ∏è  Version number unchanged - updating chart contents only"
          else
            # Manual workflow_dispatch without version - allow version bump
            echo "üöÄ Manual workflow dispatch - calculating new version"

            # Get latest release with retries
            LATEST_RELEASE=$(get_latest_release)
            if [ $? -ne 0 ]; then
              echo "::error::Failed to get latest release after all retry attempts"
              echo "‚ùå Cannot proceed without knowing the current version"
              exit 1
            fi

            CURRENT_VERSION=${LATEST_RELEASE#v}
            echo "üìå Current chart version: ${CURRENT_VERSION}"

            # Parse version components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

            # Ensure numeric values
            MAJOR=${MAJOR:-0}
            MINOR=${MINOR:-0}
            PATCH=${PATCH:-0}

            # Get bump type from input or default to patch
            BUMP_TYPE="${{ github.event.inputs.bump_type || 'patch' }}"

            # Increment based on bump type
            case "$BUMP_TYPE" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "üìà Next chart version: ${NEXT_VERSION} (bump type: ${BUMP_TYPE})"
          fi

          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Validate semantic version format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
            echo "::error::Invalid version format: $VERSION"
            echo "Version must be in semantic version format (e.g., 1.2.3)"
            exit 1
          fi

          echo "‚úÖ Version format validated: $VERSION"

      - name: Update Chart Versions
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Update rulebricks chart
          sed -i "s/^version:.*/version: ${VERSION}/" charts/rulebricks/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/rulebricks/Chart.yaml

          # Update supabase chart
          sed -i "s/^version:.*/version: ${VERSION}/" charts/supabase/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/supabase/Chart.yaml

          # Verify updates
          echo "üìã Updated Chart versions:"
          echo "Rulebricks:"
          grep -E "^(version|appVersion):" charts/rulebricks/Chart.yaml
          echo "Supabase:"
          grep -E "^(version|appVersion):" charts/supabase/Chart.yaml

      - name: Package Charts
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Create build directory
          mkdir -p build

          # Package individual charts
          helm package charts/rulebricks --destination build
          helm package charts/supabase --destination build

          # Create checksums
          cd build
          for chart in *.tgz; do
            sha256sum "$chart" > "$chart.sha256"
          done
          cd ..

          # List built artifacts
          echo "üì¶ Built charts:"
          ls -la build/

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Create release notes
          cat > release-notes.md << EOF
          # Release ${VERSION}

          ## üì¶ Charts

          - rulebricks-${VERSION}.tgz
          - supabase-${VERSION}.tgz

          ## üöÄ Installation

          \`\`\`bash
          # Using Rulebricks CLI
          rulebricks upgrade --version ${VERSION}

          # Using Helm directly
          helm repo add rulebricks https://github.com/rulebricks/charts/releases/download/v${VERSION}
          helm repo update
          helm install rulebricks rulebricks/rulebricks --version ${VERSION}
          helm install supabase rulebricks/supabase --version ${VERSION}
          \`\`\`

          ## üìã Checksums

          Verify downloaded files with the provided .sha256 files.
          EOF

          # Function to create release with retries
          create_release() {
            local max_retries=3
            local retry_delay=2
            local attempt=1

            while [ $attempt -le $max_retries ]; do
              echo "üöÄ Attempt $attempt to create/update release..."

              # Delete existing release if it exists
              if gh release view "v${VERSION}" &>/dev/null; then
                echo "üóëÔ∏è  Deleting existing release v${VERSION}..."
                gh release delete "v${VERSION}" --yes || true
                sleep 2
              fi

              # Create new release
              if gh release create "v${VERSION}" \
                --title "Charts v${VERSION}" \
                --notes-file release-notes.md \
                build/*.tgz \
                build/*.sha256; then
                echo "‚úÖ Successfully created release v${VERSION}"
                return 0
              fi

              echo "‚ö†Ô∏è  Failed attempt $attempt"
              if [ $attempt -lt $max_retries ]; then
                echo "‚è≥ Retrying in $retry_delay seconds..."
                sleep $retry_delay
                retry_delay=$((retry_delay * 2))
              fi

              attempt=$((attempt + 1))
            done

            echo "‚ùå Failed to create release after $max_retries attempts"
            return 1
          }

          if ! create_release; then
            echo "::error::Failed to create GitHub release"
            exit 1
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: charts-${{ steps.next_version.outputs.NEXT_VERSION }}
          path: |
            build/*.tgz
            build/*.sha256
          retention-days: 90

      - name: Create Helm Repository Index
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Create repo directory
          mkdir -p repo
          cp build/*.tgz repo/

          # Generate index.yaml
          helm repo index repo --url "https://github.com/rulebricks/charts/releases/download/v${VERSION}"

          # Function to upload index with retries
          upload_index() {
            local max_retries=3
            local retry_delay=2
            local attempt=1

            while [ $attempt -le $max_retries ]; do
              echo "üì§ Attempt $attempt to upload index.yaml..."

              if gh release upload "v${VERSION}" repo/index.yaml --clobber; then
                echo "‚úÖ Successfully uploaded index.yaml"
                return 0
              fi

              echo "‚ö†Ô∏è  Failed attempt $attempt"
              if [ $attempt -lt $max_retries ]; then
                echo "‚è≥ Retrying in $retry_delay seconds..."
                sleep $retry_delay
                retry_delay=$((retry_delay * 2))
              fi

              attempt=$((attempt + 1))
            done

            echo "‚ùå Failed to upload index.yaml after $max_retries attempts"
            return 1
          }

          if ! upload_index; then
            echo "::error::Failed to upload index.yaml"
            exit 1
          fi

      - name: Summary
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          echo "## üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/rulebricks/charts/releases/tag/v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "- **Reason**: New application version available" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "- **Reason**: Charts/Infrastructure update" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Reason**: Manually updated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Chart | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
          for chart in build/*.tgz; do
            name=$(basename "$chart")
            size=$(du -h "$chart" | cut -f1)
            echo "| $name | $size |" >> $GITHUB_STEP_SUMMARY
          done

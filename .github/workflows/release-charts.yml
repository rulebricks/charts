name: Release Charts

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Get next chart version
        id: next_version
        run: |
          # Get the latest release from charts repository
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/rulebricks/charts/releases/latest | jq -r '.tag_name // "v0.0.0"')
          CURRENT_VERSION=${LATEST_RELEASE#v}

          # Check if triggered by workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Parse and increment version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "ðŸ“Œ Current chart version: ${CURRENT_VERSION}"
            echo "ðŸ“ˆ Next chart version: ${NEXT_VERSION}"
          else
            # Use current version without incrementing
            NEXT_VERSION="${CURRENT_VERSION}"
            echo "ðŸ“Œ Using existing chart version: ${NEXT_VERSION}"
          fi

          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Update Chart Versions
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Update rulebricks chart
          sed -i "s/^version:.*/version: ${VERSION}/" charts/rulebricks/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/rulebricks/Chart.yaml

          # Update supabase chart
          sed -i "s/^version:.*/version: ${VERSION}/" charts/supabase/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/supabase/Chart.yaml

      - name: Package Charts
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Create build directory
          mkdir -p build

          # Package individual charts
          helm package charts/rulebricks --destination build
          helm package charts/supabase --destination build

          # Create checksums
          cd build
          for chart in *.tgz; do
            sha256sum "$chart" > "$chart.sha256"
          done
          cd ..

          # List built artifacts
          echo "ðŸ“¦ Built charts:"
          ls -la build/

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Create release notes
          cat > release-notes.md << EOF
          # Release ${VERSION}

          ## ðŸ“¦ Charts

          - rulebricks-${VERSION}.tgz
          - supabase-${VERSION}.tgz

          ## ðŸš€ Installation

          \`\`\`bash
          # Using Rulebricks CLI
          rulebricks upgrade --version ${VERSION}

          # Using Helm directly
          helm repo add rulebricks https://github.com/rulebricks/charts/releases/download/v${VERSION}
          helm repo update
          helm install rulebricks rulebricks/rulebricks --version ${VERSION}
          helm install supabase rulebricks/supabase --version ${VERSION}
          \`\`\`

          ## ðŸ“‹ Checksums

          Verify downloaded files with the provided .sha256 files.
          EOF

          # Create or update GitHub release
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Create new release for workflow_dispatch
            gh release create "v${VERSION}" \
              --title "Charts v${VERSION}" \
              --notes-file release-notes.md \
              build/*.tgz \
              build/*.sha256
          else
            # Delete existing release and recreate for push events
            gh release delete "v${VERSION}" --yes || true
            gh release create "v${VERSION}" \
              --title "Charts v${VERSION}" \
              --notes-file release-notes.md \
              build/*.tgz \
              build/*.sha256
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: charts-${{ steps.next_version.outputs.NEXT_VERSION }}
          path: |
            build/*.tgz
            build/*.sha256
          retention-days: 90

      - name: Create Helm Repository Index
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          # Create repo directory
          mkdir -p repo
          cp build/*.tgz repo/

          # Generate index.yaml
          helm repo index repo --url "https://github.com/rulebricks/charts/releases/download/v${VERSION}"

          # Upload index.yaml to release
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            gh release upload "v${VERSION}" repo/index.yaml --clobber
          else
            # For push events, the index.yaml is already included in the recreated release
            echo "Index.yaml already included in recreated release"
          fi

      - name: Summary
        run: |
          VERSION="${{ steps.next_version.outputs.NEXT_VERSION }}"

          echo "## ðŸŽ‰ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/rulebricks/charts/releases/tag/v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Chart | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
          for chart in build/*.tgz; do
            name=$(basename "$chart")
            size=$(du -h "$chart" | cut -f1)
            echo "| $name | $size |" >> $GITHUB_STEP_SUMMARY
          done

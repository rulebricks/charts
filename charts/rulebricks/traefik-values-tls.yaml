# HPA configuration for automatic scaling
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 2
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 4
          periodSeconds: 15
      selectPolicy: Max

# Resource configuration
resources:
  requests:
    cpu: "1500m"
    memory: "3Gi"
  limits:
    cpu: "2000m"
    memory: "4Gi"

# Deployment configuration
deployment:
  replicas: 1  # HPA will handle scaling
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime

# Pod anti-affinity for distribution
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - traefik
          topologyKey: kubernetes.io/hostname

service:
  type: LoadBalancer

ports:
  web:
    port: 8000
    expose:
      enabled: true
      port: 80
    exposedPort: 80
    protocol: TCP
  websecure:
    port: 8443
    expose:
      enabled: true
      port: 443
    exposedPort: 443
    protocol: TCP
    tls:
      enabled: true
      certResolver: "le"
      domains:
        - main: ""
  traefik:
    port: 9000
    expose:
      enabled: true
      port: 9000
    protocol: TCP
  metrics:
    port: 9100
    expose:
      enabled: true
      port: 9100
    protocol: TCP

additionalArguments:
  - "--api.insecure=false"
  - "--api.dashboard=true"
  - "--log.level=ERROR"  # Reduce logging to prevent memory buildup
  - "--accesslog=false"  # Disable access logs for memory efficiency
  - "--entrypoints.metrics.address=:9100"
  - "--entrypoints.traefik.address=:9000"
  - "--entrypoints.web.address=:8000"
  - "--entrypoints.websecure.address=:8443"
  - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
  - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
  # These next three will be overridden by --set
  - "--certificatesresolvers.le.acme.email=default@example.com"
  - "--certificatesresolvers.le.acme.storage=/data/acme.json"
  - "--certificatesresolvers.le.acme.tlschallenge=true"

# Update the init container to be more explicit about permissions
initContainers:
  - name: setup-acme
    image: busybox
    command:
      - /bin/sh
      - -c
      - |
        rm -f /data/acme.json && \
        touch /data/acme.json && \
        chmod 600 /data/acme.json && \
        chown 65532:65532 /data/acme.json && \
        echo "Verifying permissions:" && \
        ls -la /data/acme.json && \
        echo "Setting more restrictive umask:" && \
        umask 077
    volumeMounts:
      - name: data
        mountPath: /data
    securityContext:
      runAsNonRoot: false
      runAsUser: 0

# Make sure persistence is properly configured
persistence:
  enabled: true
  path: /data
  size: 1Gi  # Increased for better certificate management
  accessMode: ReadWriteOnce
  storageClass: "standard"  # Default storage class, CLI will override based on cloud provider
  annotations:
    # Add annotations to help with permission management
    kubernetes.io/pvc-protection: "true"
    helm.sh/resource-policy: keep  # Prevent PVC deletion on helm uninstall

# Security contexts
podSecurityContext:
  fsGroup: 65532

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

# Configure providers
providers:
  kubernetesCRD:
    enabled: true
  kubernetesIngress:
    enabled: true
    publishedService:
      enabled: true

# Enable metrics
metrics:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: false
    addEntryPointsLabels: false  # Reduce cardinality
    addServicesLabels: false     # Reduce cardinality

# Global arguments
globalArguments:
  - "--global.checknewversion"

# Enable API and ping
api:
  dashboard: true
  insecure: false

ping:
  enabled: true
  manualRouting: true
  entryPoint: "traefik"

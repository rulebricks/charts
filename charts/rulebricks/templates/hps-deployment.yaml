{{- if and .Values.hps .Values.hps.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: rulebricks-hps-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app: rulebricks-hps
spec:
  clusterIP: None
  selector:
    app: rulebricks-hps
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rulebricks-hps
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: rulebricks-hps-headless
  replicas: {{ .Values.hps.replicas | default 1 }}
  selector:
    matchLabels:
      app: rulebricks-hps
  template:
    metadata:
      labels:
        app: rulebricks-hps
    spec:
      imagePullSecrets:
        - name: regcred
      {{- with .Values.hps.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hps.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hps.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hps.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- else }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: rulebricks-hps
      {{- end }}
      {{- if not .Values.hps.affinity }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rulebricks-hps
              topologyKey: kubernetes.io/hostname
      {{- end }}
      containers:
        - name: rulebricks-hps
          image: {{ .Values.hps.image.repository }}:latest
          imagePullPolicy: {{ .Values.hps.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            requests:
              cpu: {{ .Values.hps.resources.requests.cpu | default "1000m" }}
              memory: {{ .Values.hps.resources.requests.memory | default "1Gi" }}
            limits:
              cpu: {{ .Values.hps.resources.limits.cpu | default "2000m" }}
              memory: {{ .Values.hps.resources.limits.memory | default "2Gi" }}
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.app.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.app.readinessProbe.failureThreshold }}
          envFrom:
            - configMapRef:
                name: app-config
{{- end }}

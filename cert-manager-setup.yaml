# Cert-Manager Setup for Multi-Cloud Certificate Management
# This solution works across AWS, GCP, Azure, and on-premise Kubernetes

# Step 1: Install cert-manager (run this command)
# helm repo add jetstack https://charts.jetstack.io
# helm repo update
# helm install cert-manager jetstack/cert-manager \
#   --namespace cert-manager \
#   --create-namespace \
#   --version v1.13.0 \
#   --set installCRDs=true

---
# Step 2: Create Let's Encrypt Issuers
# Staging issuer (for testing - higher rate limits)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: support@rulebricks.com  # Change this
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    # HTTP01 challenge - works everywhere, no DNS provider needed
    - http01:
        ingress:
          class: traefik
---
# Production issuer (for real certificates)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: support@rulebricks.com  # Change this
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    # HTTP01 challenge - works everywhere, no DNS provider needed
    - http01:
        ingress:
          class: traefik
---
# Step 3: Example Certificate (creates a Kubernetes Secret with the cert)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: example-com-tls
  namespace: default
spec:
  secretName: example-com-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: example.com
  dnsNames:
  - example.com
  - "*.example.com"
---
# Step 4: Updated Traefik values for cert-manager integration
# Save this as traefik-values-certmanager.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-values-certmanager
  namespace: small-deployment-2-traefik
data:
  values.yaml: |
    # HPA configuration - Now we can scale!
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 80

    # No persistence needed! Certs are in Kubernetes Secrets
    persistence:
      enabled: false

    # Resource configuration
    resources:
      requests:
        cpu: "500m"
        memory: "512Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"

    # Service configuration
    service:
      type: LoadBalancer

    # Port configuration
    ports:
      web:
        port: 8000
        expose: true
        exposedPort: 80
        protocol: TCP
      websecure:
        port: 8443
        expose: true
        exposedPort: 443
        protocol: TCP
        # No TLS config here - cert-manager handles it

    # Simpler arguments - no ACME needed
    additionalArguments:
      - "--api.dashboard=true"
      - "--ping=true"
      - "--metrics.prometheus=true"
      - "--log.level=INFO"
      - "--accesslog=false"
      - "--entrypoints.web.address=:8000"
      - "--entrypoints.websecure.address=:8443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

    # Providers
    providers:
      kubernetesCRD:
        enabled: true
        allowCrossNamespace: true
      kubernetesIngress:
        enabled: true

    # Enable Traefik to use cert-manager certificates
    tlsStore:
      default:
        defaultCertificate:
          secretName: default-certificate-secret
---
# Step 5: Example Ingress using cert-manager
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  namespace: default
  annotations:
    # This tells cert-manager to create a certificate
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Traefik-specific annotations
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - example.com
    secretName: example-com-tls  # cert-manager will create this secret
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-service
            port:
              number: 80
---
# Step 6: IngressRoute example (Traefik CRD) with cert-manager
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: example-ingressroute
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`example.com`)
      kind: Rule
      services:
        - name: my-service
          port: 80
  tls:
    secretName: example-com-tls  # Reference the cert-manager secret